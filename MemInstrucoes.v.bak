module MemInstrucoes ( adress , Instrucao , clock ) ;

 input [9:0] adress ;
 input clock ;
 output [31:0] Instrucao ;
 reg [31:0] mem [55:0];
 integer flag = 0;

 always @ ( posedge clock )
 begin
 if ( flag == 0)
 begin
 // PAR OU IMPAR
 /*
 mem[0] =  32'b01101100000000000000000000000000;  //nop
 mem[1] =  32'b01011100000000000000000000000000;  //in
 mem[2] =  32'b01000000000000100000000000000010; // r[2] = 2;
 mem[3] =  32'b01100100010000100000000000000101; // r[2] = r[2] << 5;
 mem[4] =  32'b01101000010000100000000000000101; // r[2] = r[2] >> 5;
 mem[5] =  32'b00010000001000100001100000000000; // r[3] = r[1] % r[2];
 mem[6] =  32'b00011100011000000000000000001010; // bgt r[3] > r[0], PC=10
 mem[10] =  32'b00100000000000110000000000001100; // blt r[0] > r[3], PC=12
 mem[12] =  32'b00101100011000000000000000001110; // bgtz r[3] > 0, PC=14
 mem[14] =  32'b01100000011000000000000000000000;  //out
 mem[15] =  32'b01110000000000000000000000000000;  //halt
 */
 
 //TESTE XOR
 /*
 mem[0] =  32'b01101100000000000000000000000000;  //nop
 mem[1] =  32'b01011100000000000000000000000000;  //in
 mem[2] =  32'b01001100001000100000000000000100; // slti r[2], r[1] < 4
 mem[3] =  32'b00010100000000100000000000000101; // beq r[2] == r[0], PC=5
 mem[4] =  32'b01011000001000010000100000000000; //r1 = r1 xor r1
 mem[5] =  32'b01100000001000000000000000000000;  //out
 mem[6] =  32'b01110000000000000000000000000000;  //halt
 */

 
 //FIBONACCI 1
 /*
 mem[0] =  32'b01101100000000000000000000000000;  //nop
 mem[1] =  32'b01011100000000000000000000000000;  //in
 mem[2] =  32'b00001100001000100000000000000001;  //r[2]=r[1]-1
 mem[3] =  32'b01000000000001010000000000000001; // r[5] = 1;
 mem[5] =  32'b01000000000000110000000000000000; // r[3] = 0;
 mem[6] =  32'b01000000000001000000000000000001; // r[4] = 1;
 mem[7] =  32'b01001000000000100101000000000000; // slt r[10], r[0], r[2]
 mem[8] =  32'b00010100000010100000000000010001; // beq r[10] == r[0], PC=17
 mem[9] =  32'b00011000000010100000000000001010; // bne r[10] != r[0], PC=10
 mem[10] = 32'b00000000011001000010100000000000; //r5 = r3 + r4
 mem[11] = 32'b01010100101000000010100000000000; //r5 = r5 ou r0
 mem[12] = 32'b00000000100000000001100000000000; //r3 = r4
 mem[13] = 32'b00000000101000000010000000000000; //r4 = r5
 mem[14] = 32'b00001100010000100000000000000001;  //r[2]=r[2]-1
 mem[15] = 32'b00110100000000000000000000000111;  //pc=7
 mem[16] = 32'b01010000101000000010100000000000; //r5 = r5 and r0
 mem[17] = 32'b01100000101000000000000000000000;  //out
 mem[18] = 32'b01110000000000000000000000000000;  //halt 
 */
 
 
 
 //FATORIAL
 /*
 mem[0] =  32'b01101100000000000000000000000000;  //nop
 mem[1] =  32'b01011100000000000000000000000000;  //in
 mem[2] =  32'b00001100001000100000000000000001;  //r[2]=r[1]-1
 mem[3] =  32'b01001000000000100101000000000000; // slt r[10], r[0], r[2]
 mem[4] =  32'b00010100000010100000000000001000; // beq r[10] == r[0], PC=8
 mem[5] =  32'b00110000001000100000100000000000;  //r[1] = r[1]*r[2]
 mem[6] =  32'b00001100010000100000000000000001;  //r[2]=r[2]-1
 mem[7] =  32'b00110100000000000000000000000011;  //pc=3
 mem[8] =  32'b01100000001000000000000000000010;  //out
 mem[9] =  32'b01110000000000000000000000000000;  //halt
 */
 
 
 //FIBONACCI 2
 
 mem[0] =  32'b01101100000000000000000000000000;  //nop
 mem[1] =  32'b01011100000000000000000000000000;  //in
 mem[2] =  32'b00001100001000100000000000000001;  //r[2]=r[1]-1
 mem[3] =  32'b01000000000001100000000000001001; // r[6] = 9;
 mem[4] =  32'b01000000000010110000000000000001; // r[11] = 1;
 mem[5] =  32'b01000000000001010000000000000001; // r[5] = 1;
 mem[6] =  32'b01000000000000110000000000000000; // r[3] = 0;
 mem[7] =  32'b01000100000001010000000000000001; // m[1] = r[5]
 mem[8] =  32'b00111100000001000000000000000001; // r[4] = m[1];
 mem[9] =  32'b01001000000000100101000000000000; // slt r[10], r[0], r[2]
 mem[10] = 32'b00100100000010100000000000010001; // beqz r[10] == 0, PC=17
 mem[11] = 32'b00101000000010100000000000001100; // bnez r[10] != 0, PC=12
 mem[12] = 32'b00000000011001000010100000000000; //r5 = r3 + r4
 mem[13] = 32'b00000000100000000001100000000000; //r3 = r4
 mem[14] = 32'b00000000101000000010000000000000; //r4 = r5
 mem[15] = 32'b00001000010010110001000000000000;  //r[2]=r[2]-r[11]
 mem[16] = 32'b00111000110000000000000000000000;  //pc=r[6]
 mem[17] = 32'b01100000101000000000000000000010;  //out
 mem[18] =  32'b01110000000000000000000000000000;  //halt 
 
 
 
 

 
flag <= 1;
 end
 end
 assign Instrucao = mem [ adress ];
 endmodule
